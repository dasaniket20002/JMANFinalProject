const express = require('express');
const RandomToUser = require('../schemas/RandomToUser');
const User = require('../schemas/User');
const bcrypt = require("bcrypt");
const router = express.Router();

// CHANGE PASSWORD ROUTE
// requires params {q} to be present
// post with {new_pass, cnf_pass}
router.post('/', async (req, res) => {
    try {
        const random_id = req.query.q;
        if (!random_id)
            return res.status(202).json({ err: 'No Parameters Passed' });

        const latest_data = await RandomToUser.findOne({ random_id: random_id });

        if (!latest_data)
            return res.status(202).json({ err: 'Invalid Link' });

        if (latest_data.expiry === 0)
            return res.status(202).json({ err: 'Password already updated' });

        if (Date.now() - latest_data.time_created > latest_data.expiry)
            return res.status(202).json({ err: 'Time Expired' });

        const { new_pass, cnf_pass } = req.body;
        if (!new_pass || !cnf_pass || new_pass === '' || cnf_pass === '')
            return res.status(202).json({ err: 'All Fields Required' });

        if (new_pass !== cnf_pass)
            return res.status(202).json({ err: 'Passwords do not match' });

        const salt = await bcrypt.genSalt();
        const pass_hash = await bcrypt.hash(new_pass, salt);

        const user = await User.findOne({ email: latest_data.email });
        if (!user)
            return res.status(204).json({ err: 'User does not Exist' });

        user.pass = pass_hash;
        await user.save();

        latest_data.expiry = 0;
        await latest_data.save();

        return res.status(200).json({ msg: 'Password Updated Successfully' });
    } catch (error) {
        return res.status(500).json({ err: "Internal Error", error: error });
    }
});

// GET EMAIL OF USER WHO IS ASKING TO CHANGE PASSWORD
// params {q} that contains the random id generated by forgotpass path
router.get('/getLinkedEmail', async (req, res) => {
    try {
        const random_id = req.query.q;
        if (!random_id)
            return res.status(202).json({ err: 'No Parameters Passed' });

        const latest_data = await RandomToUser.findOne({ random_id: random_id });

        if (!latest_data)
            return res.status(202).json({ err: 'Invalid Link' });

        if (latest_data.expiry === 0)
            return res.status(202).json({ err: 'Password already updated' });

        if (Date.now() - latest_data.time_created > latest_data.expiry)
            return res.status(202).json({ err: 'Time Expired' });

        return res.status(200).json({ msg: latest_data.email });
    } catch (err) {
        return res.status(500).json({ err: "Internal Error", error: error });
    }
})

module.exports = router;